// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma客户端生成器配置
generator client {
  provider = "prisma-client-js"  // 使用prisma-client-js作为客户端
}

// 数据源配置
datasource db {
  provider = "mysql"            // 使用MySQL数据库
  url      = env("DATABASE_URL") // 数据库连接URL，从环境变量获取
}

// 用户模型：存储用户基本信息
model User {
  id               Int              @id @default(autoincrement()) // 用户ID，主键，自增
  name             String?          // 用户名称，可选
  avatar           String?          // 用户头像URL，可选
  email            String?          @unique // 邮箱地址，唯一，可选
  phone            String?          @unique // 手机号码，唯一，可选
  facebookId       String?          // Facebook账号ID，可选
  passwordHash     String?          // 密码哈希值，可选
  role             String          @default("user") // 用户角色
  createdAt        DateTime         @default(now()) // 创建时间
  updatedAt        DateTime         @updatedAt // 更新时间

  // 关联字段
  memberships      Membership[]     // 用户的会员资格
  orders           Order[]          // 用户的订单
  reservationLogs  ReservationLog[] // 用户的预约记录
  messages         Message[]        // 用户的消息
  feedbacks        Feedback[]       // 用户的反馈
  recharges        Recharge[]       // 用户的充值记录
}


// 会员资格模型：管理用户的会员信息
model Membership {
  id              Int       @id @default(autoincrement()) // 会员ID，主键，自增
  userId          Int       // 关联的用户ID
  membershipType  String    // 会员类型
  balance         Float     @default(0.0) // 会员余额，默认为0
  createdAt       DateTime  @default(now()) // 创建时间
  expiresAt       DateTime? // 会员过期时间，可选

  // 关联关系
  user            User      @relation(fields: [userId], references: [id]) // 关联到用户表
}

// 店铺模型：管理门店信息
model Store {
  id              Int       @id @default(autoincrement()) // 店铺ID，主键，自增
  name            String    // 店铺名称
  location        String    // 店铺地址
  longitude       Float     // 店铺经度
  latitude        Float     // 店铺纬度
  businessStart   String    // 营业开始时间
  businessEnd     String    // 营业结束时间
  totalSeats      Int       // 座位总数
  availableSeats  Int       // 剩余座位数
  description     String    @db.Text // 场地介绍（富文本）
  notice          String    @db.Text // 注意事项（富文本）
  bookingProcess  String    @db.Text // 预约流程（富文本）
  wifiAccount     String?   // WiFi账号
  wifiPassword    String?   // WiFi密码
  phone           String    // 自习室电话
  createdAt       DateTime  @default(now()) // 创建时间
  updatedAt       DateTime  @updatedAt // 更新时间

  // 关联字段
  seats           Seat[]    // 店铺的座位
  services        Service[] // 店铺提供的服务
  orders          Order[]   // 店铺的订单
  announcements   StoreAnnouncement[] // 店铺的通知公告
  vouchers        Voucher[] // 店铺的卡券
  storeImages     StoreImage[] // 店铺的轮播图
}

// 座位模型：管理店铺座位信息
model Seat {
  id          Int       @id @default(autoincrement()) // 座位ID，主键，自增
  storeId     Int       // 关联的店铺ID
  seatNumber  String    // 座位编号
  status      String    // 座位状态：如 "可预约"、"已占用"，也可改为枚举类型
  createdAt   DateTime  @default(now()) // 创建时间
  updatedAt   DateTime  @updatedAt // 更新时间

  // 关联关系
  store       Store     @relation(fields: [storeId], references: [id]) // 关联到店铺表
  orders      Order[]   // 座位相关的订单
  reservationLogs ReservationLog[] // 座位的预约记录
}

// 服务项目模型：管理店铺提供的服务
model Service {
  id         Int       @id @default(autoincrement()) // 服务ID，主键，自增
  storeId    Int       // 关联的店铺ID
  name       String    // 服务名称
  duration   Int       // 服务时长（单位：分钟/小时）
  price      Float     // 服务价格
  createdAt  DateTime  @default(now()) // 创建时间

  // 关联关系
  store      Store     @relation(fields: [storeId], references: [id]) // 关联到店铺表
  orders     Order[]   // 服务相关的订单
}

// 订单模型：管理用户的预约订单
model Order {
  id              Int       @id @default(autoincrement()) // 订单ID，主键，自增
  userId          Int       // 下单用户ID
  storeId         Int       // 店铺ID
  seatId          Int?      // 座位ID（可选，无选座需求时为空）
  serviceId       Int?      // 服务ID（可选，仅预约座位时为空）
  status          String    // 订单状态：待付款、待使用、待评价、已完成、已取消
  orderStartTime  DateTime  // 预约开始时间
  orderEndTime    DateTime  // 预约结束时间
  createdAt       DateTime  @default(now()) // 创建时间
  updatedAt       DateTime  @updatedAt // 更新时间

  // 关联关系
  user            User      @relation(fields: [userId], references: [id]) // 关联到用户表
  store           Store     @relation(fields: [storeId], references: [id]) // 关联到店铺表
  seat            Seat?     @relation(fields: [seatId], references: [id]) // 关联到座位表（可选）
  service         Service?  @relation(fields: [serviceId], references: [id]) // 关联到服务表（可选）
  reservationLogs ReservationLog[] // 订单的预约记录
  payment         Payment?  // 订单的支付信息
  reconciliations Reconciliation[] // 订单的对账记录
}

// 预约记录模型：记录座位预约的详细信息
model ReservationLog {
  id         Int       @id @default(autoincrement()) // 记录ID，主键，自增
  userId     Int       // 预约用户ID
  orderId    Int       // 关联订单ID
  seatId     Int       // 预约座位ID
  startTime  DateTime  // 预约开始时间
  endTime    DateTime  // 预约结束时间
  createdAt  DateTime  @default(now()) // 创建时间

  // 关联关系
  user       User      @relation(fields: [userId], references: [id]) // 关联到用户表
  order      Order     @relation(fields: [orderId], references: [id]) // 关联到订单表
  seat       Seat      @relation(fields: [seatId], references: [id]) // 关联到座位表
}

// 支付模型：管理订单支付信息
model Payment {
  id              Int       @id @default(autoincrement()) // 支付ID，主键，自增
  orderId         Int       @unique // 关联订单ID，唯一约束
  amount          Float     // 支付金额
  paymentMethod   String    // 支付方式
  paymentStatus   String    // 支付状态：待支付、已支付、失败
  transactionTime DateTime  // 交易时间
  createdAt       DateTime  @default(now()) // 创建时间
  updatedAt       DateTime  @updatedAt // 更新时间

  // 关联关系
  order           Order     @relation(fields: [orderId], references: [id]) // 关联到订单表
}

// 消息模型：管理用户消息和系统公告
model Message {
  id          Int       @id @default(autoincrement()) // 消息ID，主键，自增
  userId      Int?      // 接收用户ID（为空表示全平台公告）
  messageType String    // 消息类型
  content     String    // 消息内容
  isRead      Boolean   @default(false) // 是否已读
  createdAt   DateTime  @default(now()) // 创建时间

  // 关联关系
  user        User?     @relation(fields: [userId], references: [id]) // 关联到用户表（可选）
}

// 反馈模型：管理用户反馈信息
model Feedback {
  id          Int       @id @default(autoincrement()) // 反馈ID，主键，自增
  userId      Int       // 反馈用户ID
  content     String    // 反馈内容
  contactInfo String?   // 联系方式（可选）
  createdAt   DateTime  @default(now()) // 创建时间

  // 关联关系
  user        User      @relation(fields: [userId], references: [id]) // 关联到用户表
}

// 协议模型：管理系统各类协议
model Agreement {
  id         Int       @id @default(autoincrement()) // 协议ID，主键，自增
  type       String    // 协议类型：注册协议、隐私协议等
  content    String    // 协议内容
  version    String    // 协议版本
  updatedAt  DateTime  @default(now()) // 更新时间
}

// 轮播图模型：管理首页轮播图
model Carousel {
  id         Int       @id @default(autoincrement()) // 轮播图ID，主键，自增
  imageUrl   String    // 图片URL
  linkUrl    String?   // 跳转链接（可选）
  sortOrder  Int       // 排序顺序
  createdAt  DateTime  @default(now()) // 创建时间
  updatedAt  DateTime  @updatedAt // 更新时间
}

// 管理员模型：管理后台用户
model Admin {
  id           Int         @id @default(autoincrement()) // 管理员ID，主键，自增
  username     String      @unique // 用户名，唯一
  passwordHash String      // 密码哈希值
  createdAt    DateTime    @default(now()) // 创建时间
  updatedAt    DateTime    @updatedAt // 更新时间

  // 关联字段
  adminRoles   AdminRole[] // 管理员角色关联
}

// 角色模型：管理系统角色
model Role {
  id              Int           @id @default(autoincrement()) // 角色ID，主键，自增
  roleName        String        // 角色名称
  description     String?       // 角色描述（可选）

  // 关联字段
  adminRoles      AdminRole[]   // 角色与管理员的关联
  rolePermissions RolePermission[] // 角色的权限关联
}

// 权限模型：管理系统权限
model Permission {
  id              Int           @id @default(autoincrement()) // 权限ID，主键，自增
  permissionName  String        // 权限名称
  description     String?       // 权限描述（可选）

  // 关联字段
  rolePermissions RolePermission[] // 权限与角色的关联
}

// 角色权限关联模型：管理角色与权限的多对多关系
model RolePermission {
  id           Int         @id @default(autoincrement()) // 关联ID，主键，自增
  roleId       Int         // 角色ID
  permissionId Int         // 权限ID

  // 关联关系
  role         Role        @relation(fields: [roleId], references: [id]) // 关联到角色表
  permission   Permission  @relation(fields: [permissionId], references: [id]) // 关联到权限表
}

// 管理员角色关联模型：管理管理员与角色的多对多关系
model AdminRole {
  id       Int    @id @default(autoincrement()) // 关联ID，主键，自增
  adminId  Int    // 管理员ID
  roleId   Int    // 角色ID

  // 关联关系
  admin    Admin  @relation(fields: [adminId], references: [id]) // 关联到管理员表
  role     Role   @relation(fields: [roleId], references: [id]) // 关联到角色表
}

// 充值模型：管理用户充值记录
model Recharge {
  id             Int       @id @default(autoincrement()) // 充值ID，主键，自增
  userId         Int       // 充值用户ID
  amount         Float     // 充值金额
  rechargeStatus String    // 充值状态：成功、失败、处理中
  createdAt      DateTime  @default(now()) // 创建时间
  updatedAt      DateTime  @updatedAt // 更新时间

  // 关联关系
  user           User      @relation(fields: [userId], references: [id]) // 关联到用户表
}

// 对账模型：管理系统收益记录
model Reconciliation {
  id        Int       @id @default(autoincrement()) // 对账ID，主键，自增
  type      String    // 收益类型：会员充值收益、服务套餐收益等
  amount    Float     // 收益金额
  orderId   Int?      // 关联订单ID（可选）
  createdAt DateTime  @default(now()) // 创建时间

  // 关联关系
  order     Order?    @relation(fields: [orderId], references: [id]) // 关联到订单表（可选）
}

// 系统设置模型：管理系统配置项
model SystemSetting {
  id           Int       @id @default(autoincrement()) // 设置ID，主键，自增
  settingKey   String    @unique // 设置键名，唯一
  settingValue String    // 设置值
  description  String?   // 设置描述（可选）
  updatedAt    DateTime  @updatedAt // 更新时间
}

// 第三方服务模型：管理外部服务配置
model ThirdPartyService {
  id               Int       @id @default(autoincrement()) // 服务ID，主键，自增
  serviceName      String    // 服务名称
  configParameters String    // 配置参数（JSON格式字符串）
  createdAt        DateTime  @default(now()) // 创建时间
  updatedAt        DateTime  @updatedAt // 更新时间
}

// 统计数据模型：记录系统各项统计指标
model Statistics {
  id           Int       @id @default(autoincrement()) // 统计ID，主键，自增
  statDate     DateTime  // 统计日期
  totalUsers   Int       // 总用户数
  newUsers     Int       // 新增用户数
  totalOrders  Int       // 总订单数
  newOrders    Int       // 新增订单数
  totalMembers Int       // 总会员数
  newMembers   Int       // 新增会员数
  createdAt    DateTime  @default(now()) // 创建时间
}

// 店铺通知公告模型：管理店铺的通知公告
model StoreAnnouncement {
  id          Int       @id @default(autoincrement()) // 公告ID，主键，自增
  storeId     Int       // 关联的店铺ID
  title       String    // 公告标题
  content     String    @db.Text // 公告内容
  isActive    Boolean   @default(true) // 是否激活
  startDate   DateTime  // 开始时间
  endDate     DateTime? // 结束时间（可选）
  createdAt   DateTime  @default(now()) // 创建时间
  updatedAt   DateTime  @updatedAt // 更新时间

  // 关联关系
  store       Store     @relation(fields: [storeId], references: [id]) // 关联到店铺表
}

// 店铺卡券模型：管理店铺的卡券
model Voucher {
  id              Int       @id @default(autoincrement()) // 卡券ID，主键，自增
  storeId         Int       // 关联的店铺ID
  name            String    // 卡券名称
  type            String    // 卡券类型（如：时长卡、次数卡等）
  value           Float     // 卡券面值
  price           Float     // 卡券售价
  description     String    @db.Text // 卡券描述
  validityPeriod  Int       // 有效期（天数）
  isActive        Boolean   @default(true) // 是否激活
  createdAt       DateTime  @default(now()) // 创建时间
  updatedAt       DateTime  @updatedAt // 更新时间

  // 关联关系
  store           Store     @relation(fields: [storeId], references: [id]) // 关联到店铺表
}

// 店铺轮播图模型：管理店铺的轮播图
model StoreImage {
  id          Int       @id @default(autoincrement()) // 图片ID，主键，自增
  storeId     Int       // 关联的店铺ID
  imageName    String    // 图片URL
  sortOrder   Int       @default(0) // 排序顺序
  isActive    Boolean   @default(true) // 是否激活
  createdAt   DateTime  @default(now()) // 创建时间
  updatedAt   DateTime  @updatedAt // 更新时间

  // 关联关系
  store       Store     @relation(fields: [storeId], references: [id]) // 关联到店铺表
}
